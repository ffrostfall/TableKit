[{"title":"TableKit","type":0,"sectionRef":"#","url":"/TableKit/docs/intro","content":"","keywords":""},{"title":"Why?​","type":1,"pageTitle":"TableKit","url":"/TableKit/docs/intro#why","content":"I made this project primarily because there were no up-to-date &amp; high quality table manipulation libraries out there. None suited my needs- I wanted something I could plug in with Wally, something fully typed, and using modern-day Luau functions. This doesn't exist. "},{"title":"Advantages​","type":1,"pageTitle":"TableKit","url":"/TableKit/docs/intro#advantages","content":"This is mainly for my personal usage- which means that it will be updated any time I need a new feature.I use it in my open source packages (at the moment, 2 unreleased) as well.It's up-to-date with Luau features. This means it uses generic iteration, all of the built-in table functions, etc.It's fully typed. "},{"title":"Disadvantages​","type":1,"pageTitle":"TableKit","url":"/TableKit/docs/intro#disadvantages","content":"It's another dependency for your project. However, if you're going to do these yourself, you might as well use this. "},{"title":"Prior Art / Inspiration​","type":1,"pageTitle":"TableKit","url":"/TableKit/docs/intro#prior-art--inspiration","content":"TableUtils by sleitnickJavascript Array objects- you'll see a few things taken from there such as .Unshift(). "},{"title":"Installation","type":0,"sectionRef":"#","url":"/TableKit/docs/Installation","content":"","keywords":""},{"title":"With Wally​","type":1,"pageTitle":"Installation","url":"/TableKit/docs/Installation#with-wally","content":"Install WallyPut TableKit in the wally.toml file under [dependencies] wally.toml [dependencies] TableKit = ffrostflame/tablekit@0.1.0  Run wally install "},{"title":"Without Wally​","type":1,"pageTitle":"Installation","url":"/TableKit/docs/Installation#without-wally","content":"Get the model from the Roblox Marketplace "},{"title":"TableKit","type":0,"sectionRef":"#","url":"/TableKit/api/TableKit","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#functions","content":" "},{"title":"DeepCopy​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#DeepCopy","content":"&lt;/&gt; TableKit.DeepCopy(tableToClone: table) → table This function &quot;deep&quot; copies a table, and all of its contents. This means that it will clone the entire table, and tables within that table- as opposed to shallow-copying with table.clone local Dictionary = { SomethingInside = { A = 1, B = 2, }, } local CopiedDictionary = TableKit.DeepCopy(Dictionary) print(CopiedDictionary) -- prints { [&quot;SomethingInside&quot;] = { [&quot;A&quot;] = 1, [&quot;B&quot;] = 1 } } Recursive Function This function is recursive- this can cause stack overflows.  "},{"title":"MergeDictionary​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#MergeDictionary","content":"&lt;/&gt; TableKit.MergeDictionary( dictionary1: table, dictionary2: table ) → table This function merges two dictionaries. Keys will overwrite- if there are duplicate keys, dictionary2 will take priority. local Dictionary = { A = 1, B = 2, } local SecondDictionary = { C = 3, D = 4, } print(TableKit.MergeDictionary(Dictionary, SecondDictionary)) -- prints { [&quot;A&quot;] = 1, [&quot;B&quot;] = 2, [&quot;C&quot;] = 3, [&quot;D&quot;] = 4 } Potential overwrite Keys are overwritten when using .MergeDictionary()  "},{"title":"Keys​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#Keys","content":"&lt;/&gt; TableKit.Keys(dictionary: table) → table This function returns a table with the keys of the passed dictionary. local Dictionary = { A = 1, B = 2, C = 3, } print(TableKit.Keys(Dictionary)) -- prints {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;}   "},{"title":"Values​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#Values","content":"&lt;/&gt; TableKit.Values(dictionary: table) → table This function returns a table with the values of the passed dictionary. local Dictionary = { A = 1, B = 2, C = 3, } print(TableKit.Values(Dictionary)) -- prints {1, 2, 3}   "},{"title":"MergeArrays​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#MergeArrays","content":"&lt;/&gt; TableKit.MergeArrays( array1: table, array2: table ) → table Merges two arrays; array2 will be added to array1- this means that the indexes of array1 will be the same. local FirstArray = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;} local SecondArray = {&quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;} print(TableKit.MergeArrays(FirstArray, SecondArray)) -- prints {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;}   "},{"title":"Reconcile​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#Reconcile","content":"&lt;/&gt; TableKit.Reconcile( original: table, reconcile: table ) → table Deep-reconciles a dictionary into another dictionary. local template = { A = 0, B = 0, C = { D = &quot;&quot;, }, } local toReconcile = { A = 9, B = 8, C = {}, } print(TableKit.Reconcile(toReconcile, template)) -- prints { A = 9, B = 8, C = { D = &quot;&quot; }   "},{"title":"IsArray​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#IsArray","content":"&lt;/&gt; TableKit.IsArray(mysteryTable: table) → boolean Detects if a table is an array, meaning purely number indexes and indexes starting at 1. local Array = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;} local Dictionary = { NotAnArray = true } print(TableKit.IsArray(Array), TableKit.IsArray(Dictionary)) -- prints true, false   "},{"title":"IsDictionary​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#IsDictionary","content":"&lt;/&gt; TableKit.IsDictionary(mysteryTable: table) → boolean Detects if a table is a dictionary, meaning it is not purely number indexes. local Array = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;} local Dictionary = { NotAnArray = true } print(TableKit.IsDictionary(Array), TableKit.IsDictionary(Dictionary)) -- prints false, true   "},{"title":"ToString​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#ToString","content":"&lt;/&gt; TableKit.ToString(obj: {}) → string Converts a table into a string. local DictionaryA = { A = &quot;Z&quot;, B = &quot;X&quot;, C = &quot;Y&quot;, } print(TableKit.ToString(DictionaryA)) -- prints { -- [A]: Z -- [C]: Y -- [B]: X -- }   "},{"title":"From​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#From","content":"&lt;/&gt; TableKit.From(value: unknown) → {[number]: unknown} Takes in a data type, and returns it in array form. local str = &quot;Test&quot; print(TableKit.From(str)) -- prints (&quot;T&quot;, &quot;e&quot;, &quot;s&quot;, t&quot;)   "},{"title":"Filter​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#Filter","content":"&lt;/&gt; TableKit.Filter( arr: {[number]: unknown}, callback: (value: value) → boolean ) → {[number]: unknown} Creates a shallow copy of an array, passed through a filter callback- if the callback returns false, the element is removed. local str = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;} print(TableKit.Filter(str, function(value) return value &gt; &quot;c&quot; end)) -- prints { [1] = &quot;d&quot;, [2] = &quot;e&quot;, [3] = &quot;f&quot;, [4] = &quot;g&quot; }   "},{"title":"Some​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#Some","content":"&lt;/&gt; TableKit.Some( tbl: table, callback: (value) → boolean ) → boolean Loops through every single element, and puts it through a callback. If the callback returns true, the function returns true. local array = {1, 2, 3, 4, 5} local even = function(value) return value % 2 == 0 end print(TableKit.Some(array, even)) -- Prints true   "},{"title":"IsFlat​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#IsFlat","content":"&lt;/&gt; TableKit.IsFlat(tbl: table) → boolean Detects if a table has an embedded table as one of its members. local Shallow = {&quot;a&quot;, &quot;b&quot;} local Deep = {&quot;a&quot;, {&quot;b&quot;}} print(TableKit.IsFlat(Shallow)) -- prints true print(TableKit.IsFlat(Deep)) -- prints false   "},{"title":"Every​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#Every","content":"&lt;/&gt; TableKit.Every( tbl: table, callback: (value) → boolean ) → boolean Loops through every single element, and puts it through a callback. If any of the conditions return false, the function returns false. local array = {1, 2, 3, 4, 5} local even = function(value) return value % 2 == 0 end local odd = function(value) return value % 2 ~= 0 end print(TableKit.Every(array, even)) -- Prints false print(TableKit.Every(array, odd)) -- Prints false   "},{"title":"HasKey​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#HasKey","content":"&lt;/&gt; TableKit.HasKey( dictionary: table, key: unknown ) → boolean Detects if a dictionary has a certain key. local Dictionary = { Hay = &quot;A&quot;, MoreHay = &quot;B&quot;, Needle = &quot;C&quot;, SomeHay = &quot;D&quot;, } print(TableKit.HasKey(Dictionary, &quot;Needle&quot;)) -- prints true   "},{"title":"HasValue​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#HasValue","content":"&lt;/&gt; TableKit.HasValue( tbl: table, value: unknown ) → boolean Detects if a dictionary has a certain value. local Array = { &quot;Has&quot;, &quot;this&quot;, &quot;thing&quot; } print(TableKit.HasValue(Array, &quot;Has&quot;)) -- prints true   "},{"title":"IsEmpty​","type":1,"pageTitle":"TableKit","url":"/TableKit/api/TableKit#IsEmpty","content":"&lt;/&gt; TableKit.IsEmpty(mysteryTable: table) → boolean Detects if a table is empty. local Empty = {} local NotEmpty = { &quot;Stuff&quot; } print(TableKit.IsEmpty(Empty), TableKit.IsEmpty(NotEmpty)) -- prints true, false  "}]